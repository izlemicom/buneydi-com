generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime
  User               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Ad {
  id          String  @id
  imageUrl    String
  redirectUrl String
  state       AdState @default(NOTPUBLISHED)
}

model Comment {
  id             String           @id
  content        String
  userId         String
  postId         String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  Post           Post             @relation(fields: [postId], references: [id])
  User           User             @relation(fields: [userId], references: [id])
  CommentDislike CommentDislike[]
  CommentLike    CommentLike[]
}

model CommentDislike {
  id        String   @id
  commentId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Comment   Comment  @relation(fields: [commentId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model CommentLike {
  id        String   @id
  commentId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Comment   Comment  @relation(fields: [commentId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model Image {
  id     String @id
  url    String
  postId String
  userId String
  Post   Post   @relation(fields: [postId], references: [id])
  User   User   @relation(fields: [userId], references: [id])
}

model Post {
  id          String        @id
  title       String
  content     String
  slug        String        @unique
  mainImage   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  state       State         @default(DRAFT)
  userId      String
  User        User          @relation(fields: [userId], references: [id])
  Comment     Comment[]
  Image       Image[]
  PostDislike PostDislike[]
  PostLike    PostLike[]
  PostViews   PostViews[]
  Tag         Tag[]
}

model PostDislike {
  id        String   @id
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Post      Post     @relation(fields: [postId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model PostLike {
  id        String   @id
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Post      Post     @relation(fields: [postId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model PostViews {
  id     String @id
  ip     String
  postId String
  Post   Post   @relation(fields: [postId], references: [id])
}

model Session {
  id           String   @id
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  User         User     @relation(fields: [userId], references: [id])
}

model Tag {
  id        String   @id
  content   String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime
  userId    String
  User      User     @relation(fields: [userId], references: [id])
  Post      Post[]
}

model User {
  id             String           @id
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  role           Role             @default(USER)
  Account        Account[]
  Comment        Comment[]
  CommentDislike CommentDislike[]
  CommentLike    CommentLike[]
  Image          Image[]
  Post           Post[]
  PostDislike    PostDislike[]
  PostLike       PostLike[]
  Session        Session[]
  Tag            Tag[]
}

model VerificationRequest {
  id         String   @id
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime

  @@unique([identifier, token])
}

enum AdState {
  NOTPUBLISHED
  PUBLISHED
}

enum Role {
  USER
  AUTHOR
  ADMIN
}

enum State {
  DRAFT
  PUBLISHED
}
