// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model User {
  id            String        @id @default(cuid())
  name          String?
  password      String?
  mahlas        String?
  adress        String?
  city          String?
  country       String?
  postalCode    String?
  iban          String?
  bio           String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?       @default("http://localhost:3000/img/default-user-image.webp")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  postlikes     PostLike[]
  commentLikes  CommentLike[]
  role          Role          @default(USER)
  tags          Tag[]
  addedImages   Image[]
  postViews     PostViews[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String      @id @default(cuid())
  title     String
  content   String
  slug      String      @unique
  mainImage String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  state     State       @default(DRAFT)
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  comments  Comment[]
  postViews PostViews[]
  postLikes PostLike[]
  tags      Tag[]
  images    Image[]
}

model Comment {
  id           String        @id @default(cuid())
  content      String
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  post         Post          @relation(fields: [postId], references: [id])
  postId       String
  commentLikes CommentLike[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model PostViews {
  id        String   @id @default(cuid())
  ip        String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model PostLike {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CommentLike {
  id        String   @id @default(cuid())
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id        String   @id @default(cuid())
  content   String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy User     @relation(fields: [userId], references: [id])
  userId    String
  posts     Post[]
}

model Image {
  id      String  @id
  url     String  @unique
  post    Post?   @relation(fields: [postId], references: [id])
  postId  String?
  addedBy User    @relation(fields: [userId], references: [id])
  userId  String
}

model VerificationCode {
  id               String @id @default(cuid())
  email            String @unique
  verificationCode Int
}

model Ad {
  id          String  @id @default(cuid())
  imageUrl    String
  redirectUrl String
  state       AdState @default(NOTPUBLISHED)
}

enum Role {
  USER
  AUTHOR
  ADMIN
}

enum AdState {
  NOTPUBLISHED
  PUBLISHED
}

enum State {
  DRAFT
  PUBLISHED
}
